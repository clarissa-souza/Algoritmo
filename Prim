# Prim é um algoritmo guloso empregado para encontrar uma árvore geradora mínima num grafo conectado, valorado e não direcionado
# o objetivo é encontrar o menor caminho para percorrer o grafo. 
# Utilizei a estrutura heap, dict e o método guloso
# A função edges retorna uma lista com todas as arestas, a função getEdge retorna a aresta no formato origem, destino e peso
# A função vertices retorna uma lista com todos os vertices, a função addVertex adiciona vértices ao grafo

def prims(G):
  #quantidade de arestas
  E=[]
  E= g.edges()
  print('Lista de arestas E=',E)
  print ('E=',E)
  n_edges=len(E)
  
  #percorro a lista para saber quem é o menor peso e guardo o peso e a aresta
  c=float('inf')
  for i in range (0,len(E)):
    edgeo=E[i][0]
    edged=E[i][1]    
    dist=g.getEdge(edgeo,edged)
    if dist < c:
      b = edgeo
      c = dist
      
  print ('Aresta selecionada =',b,'Peso =',c)
  
  #coloco todos os vertices no grafo novo
  C=Graph()
  for i in g.vertices():
    C.addVertex(i)
  print ('Vertices do novo grafo:',C.vertices())


  P=dict()
  H=[]
  heappush(H,(0,None,b)) #outra heap para controlar as arestas que devo verificar
                         #incluo o vertice com menor peso, o None é para não fechar ciclo

  while H != []:
    (peso,p,x)=heappop(H)
    print ('Adjacentes de',x,':',g.adjacents(x))
    for t in G.adjacents(x): #para todo adjacente de x
      peso1=g.getEdge(x,t)
      print('Peso da aresta (',x,',',t,')=',peso1)
      if x not in P: #vejo se o vertice de destino x já existe em P
        P[x] = (p,peso)
        print ('P=',P)
        if p !=None:
          C.addEdge(x,p,peso)
        print('Novo grafo=',P)
      if t not in P : #se o destino da aresta que estou pesquisando não existe na heap então coloque
        print('t=',t)
        heappush(H,(peso1,x,t))
        print ('H=',H)
  print ('P=',P)


  print('Vertices do novo grafo=',C.vertices())
  print('Arestas no novo grafo=',C.edges())
  
  return C
