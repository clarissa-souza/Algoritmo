# StringMatch Naive é o método força bruta para verificar se uma sequencia de caracteres (padrão) existe no texto
#to do (texto, padrao)

def Naive(T,S):  # T é o texto e S é o padrão
  j=0
  for i in range (0,len(T)):
    if T[i]==S[j]:
      cont=i
      k=0
      for k in range (0, len(S)):
        if S[k] == T[cont]:
          cont=cont+1
          k=k+1
          if k==len(S):
            return True
        else:
          j=0
          break
  return False


# O algoritmo KMP examina os caracteres do texto um a um, da esquerda para a direita, sem nunca retroceder. 
# Em cada iteração, o algoritmo sabe qual posição deve ser emparelhada com a próxima posição i+1 do texto

def tabelaKMP(P):
  i=0
  j=1
  I=[ 0 * len(P) for i in range (0,len(P)) ]
  I[0]=0
  while j < len(P):
    if P[i] == P[j]:
        I[j]=i+1
        i=i+1
        j=j+1
    else:
      if i==0:
        I[j] = 0
        j=j+1
      else:
        i=I[i-1]
  return I

def KMP(T,S):
  G=tabelaKMP(S)
  i=0
  j=0
  while i < len(T):
    print(f"i={i}, j={j}, S={S[0:j]+'-'+S[j]+'-'+S[j+1:]}, T={T[0:i]+'-'+T[i]+'-'+T[i+1:]}") 
    if T[i]==S[j]:
      i=i+1
      j=j+1
      if j==len(S):
        return True
    else:
      if j>0:
        j=G[j-1]      
      else:
        i=i+1
  return False

# BMH é uma simplificação do algoritmo BM usando apenas a regra do caractere errado
def tabelaBMH (P):
  I=defaultdict(dict)
  p=len(P)
  I.setdefault('*',p)
  i=0
  for a in P:
    if i < p-1:
      I[a]=(len(P)-i-1)
      i=i+1
    else:
      if a not in I:
        I[a]=(len(P))
  return I

def BMH(T, S):
  G=tabelaBMH(S)
  f=False
  cont=len(S)-1
  while f==False:    
    if cont > len(T):
      break
    if S[len(S)-1] == T[cont]:
      q=cont
      for k in range(len(S)-1,-1,-1):
        if S[k] == T[q]:
          q=q-1
          if k==0:
            return True
        else:
          cont=cont+G[T[cont]]
          break
    else:
      if T[cont] in G:
        cont=cont+G[T[cont]]
      else: 
        cont=cont+G['*']
  return False
